
from __future__ import annotations

from typing import Protocol

from _collections_abc import dict_items
from blocks.blockprotocol import ItemProtocol


class InventoryProtocol(Protocol):

    def __init__(self): ...
    def __iter__(self) -> dict_items[ItemProtocol, int]: ...
    def add(self, item: ItemProtocol, quantity: int=1): ...
    def remove(self, item: ItemProtocol, quantity: int=1): ...
    def transfer(self, /, *, item: ItemProtocol, inventory: InventoryProtocol, quantity: int=1): ...
    def try_transfer(self, /, *, item: ItemProtocol, inventory: InventoryProtocol, quantity: int=1): ...
    def has_item(self, item: ItemProtocol, quantity: int=1) -> bool: ...
    def has_space(self, amount: int=1) -> bool: ...
    def as_list(self) -> list[tuple[ItemProtocol, int]]: ...
    def as_dict(self) -> dict[ItemProtocol, int]: ...
